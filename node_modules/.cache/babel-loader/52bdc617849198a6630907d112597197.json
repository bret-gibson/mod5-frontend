{"ast":null,"code":"var _jsxFileName = \"/Users/bretgibson/Development/code/mod_5/book-club-frontend/src/components/LoginForm.js\";\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router\";\nimport { Grid, Header, Button, Form, Segment, Message } from \"semantic-ui-react\";\nimport { setCurrentUser, loginUser } from \"../actions/user\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\n\nfunction LoginForm(props) {\n  const [input, setInput] = useState({\n    username: \"\",\n    password: \"\"\n  });\n\n  const handleChange = e => {\n    setInput({ ...input,\n      [e.target.name]: [e.target.value]\n    });\n  }; //When form is submitted, make a fetch to \"log in the user\"\n\n\n  const handleLoginSubmit = e => {\n    console.log(\"attempting to log in\");\n    fetch(\"http://localhost:3000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // Accept: \"application.json\",\n\n      },\n      body: JSON.stringify({\n        username: input.username,\n        password: input.password\n      })\n    }).then(res => res.json()).then(data => {\n      debugger;\n      localStorage.setItem(\"user\", data.user_data);\n      localStorage.setItem(\"username\", data.user_data.username);\n      localStorage.setItem(\"token\", data.token);\n      loginUser(data.user_data); // setCurrentUser({\n      //   id: data.user_data.id,\n      //   username: data.user_data.username,\n      // });\n      // if (data.error_message) {\n      //   alert(data.error_message);\n      // } else {\n      //   //successful log in\n      //   debugger;\n      //   localStorage.setItem(\"token\", data.token);\n      //   setCurrentUser(data.user_data);\n      // }\n    }); // loginUser(input.username, input.password);\n  };\n\n  return (\n    /*#__PURE__*/\n    //   <Segment>\n    //     <Form\n    //       onSubmit={this.handleLoginSubmit}\n    //       size=\"mini\"\n    //       key=\"mini\"\n    //       loading={this.props.authenticatingUser}\n    //       error={this.props.failedLogin}\n    //     >\n    //       <Message\n    //         error\n    //         header={this.props.failedLogin ? this.props.error : null}\n    //       />\n    //       <Form.Group widths=\"equal\">\n    //         <Form.Input\n    //           label=\"username\"\n    //           placeholder=\"username\"\n    //           name=\"username\"\n    //           onChange={this.handleChange}\n    //           value={this.state.username}\n    //         />\n    //         <Form.Input\n    //           type=\"password\"\n    //           label=\"password\"\n    //           placeholder=\"password\"\n    //           name=\"password\"\n    //           onChange={this.handleChange}\n    //           value={this.state.password}\n    //         />\n    //       </Form.Group>\n    //       <Button type=\"submit\">Login</Button>\n    //     </Form>\n    //   </Segment>\n    React.createElement(Grid, {\n      textAlign: \"center\",\n      verticalAlign: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      style: {\n        maxWidth: 450\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h2\",\n      color: \"teal\",\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"/static/images/logo.png\",\n      alt: \"logo\",\n      className: \"image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }), \" \", \"Log-in to your account\"), /*#__PURE__*/React.createElement(Form, {\n      size: \"large\",\n      onSubmit: handleLoginSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      stacked: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Form.Input, {\n      fluid: true,\n      icon: \"user\",\n      iconPosition: \"left\",\n      placeholder: \"Username\",\n      name: \"username\",\n      value: input.username,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Form.Input, {\n      fluid: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      placeholder: \"Password\",\n      type: \"password\",\n      name: \"password\",\n      value: input.password,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"teal\",\n      fluid: true,\n      size: \"large\",\n      onClick: handleLoginSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, \"Login\"))), /*#__PURE__*/React.createElement(Message, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, \"New to us? \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#root\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 22\n      }\n    }, \"Sign Up\"))))\n  );\n}\n\nconst mapStateToProps = state => ({\n  user: state.user.user\n});\n\nexport default withRouter(connect(mapStateToProps, {\n  setCurrentUser\n})(LoginForm));","map":{"version":3,"sources":["/Users/bretgibson/Development/code/mod_5/book-club-frontend/src/components/LoginForm.js"],"names":["React","useState","withRouter","Grid","Header","Button","Form","Segment","Message","setCurrentUser","loginUser","compose","connect","LoginForm","props","input","setInput","username","password","handleChange","e","target","name","value","handleLoginSubmit","console","log","fetch","method","headers","body","JSON","stringify","then","res","json","data","localStorage","setItem","user_data","token","maxWidth","mapStateToProps","state","user"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { withRouter } from \"react-router\";\nimport {\n  Grid,\n  Header,\n  Button,\n  Form,\n  Segment,\n  Message,\n} from \"semantic-ui-react\";\nimport { setCurrentUser, loginUser } from \"../actions/user\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\n\nfunction LoginForm(props) {\n  const [input, setInput] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  const handleChange = (e) => {\n    setInput({\n      ...input,\n      [e.target.name]: [e.target.value],\n    });\n  };\n\n  //When form is submitted, make a fetch to \"log in the user\"\n  const handleLoginSubmit = (e) => {\n    console.log(\"attempting to log in\");\n    fetch(\"http://localhost:3000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // Accept: \"application.json\",\n      },\n      body: JSON.stringify({\n        username: input.username,\n        password: input.password,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        debugger;\n        localStorage.setItem(\"user\", data.user_data);\n        localStorage.setItem(\"username\", data.user_data.username);\n        localStorage.setItem(\"token\", data.token);\n        loginUser(data.user_data);\n        // setCurrentUser({\n        //   id: data.user_data.id,\n        //   username: data.user_data.username,\n        // });\n\n        // if (data.error_message) {\n        //   alert(data.error_message);\n        // } else {\n        //   //successful log in\n        //   debugger;\n        //   localStorage.setItem(\"token\", data.token);\n        //   setCurrentUser(data.user_data);\n        // }\n      });\n    // loginUser(input.username, input.password);\n  };\n  return (\n    //   <Segment>\n    //     <Form\n    //       onSubmit={this.handleLoginSubmit}\n    //       size=\"mini\"\n    //       key=\"mini\"\n    //       loading={this.props.authenticatingUser}\n    //       error={this.props.failedLogin}\n    //     >\n    //       <Message\n    //         error\n    //         header={this.props.failedLogin ? this.props.error : null}\n    //       />\n    //       <Form.Group widths=\"equal\">\n    //         <Form.Input\n    //           label=\"username\"\n    //           placeholder=\"username\"\n    //           name=\"username\"\n    //           onChange={this.handleChange}\n    //           value={this.state.username}\n    //         />\n    //         <Form.Input\n    //           type=\"password\"\n    //           label=\"password\"\n    //           placeholder=\"password\"\n    //           name=\"password\"\n    //           onChange={this.handleChange}\n    //           value={this.state.password}\n    //         />\n    //       </Form.Group>\n    //       <Button type=\"submit\">Login</Button>\n    //     </Form>\n    //   </Segment>\n\n    <Grid textAlign=\"center\" verticalAlign=\"middle\">\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as=\"h2\" color=\"teal\" textAlign=\"center\">\n          <img src=\"/static/images/logo.png\" alt=\"logo\" className=\"image\" />{\" \"}\n          Log-in to your account\n        </Header>\n        <Form size=\"large\" onSubmit={handleLoginSubmit}>\n          <Segment stacked>\n            <Form.Input\n              fluid\n              icon=\"user\"\n              iconPosition=\"left\"\n              placeholder=\"Username\"\n              name=\"username\"\n              value={input.username}\n              onChange={handleChange}\n            />\n            <Form.Input\n              fluid\n              icon=\"lock\"\n              iconPosition=\"left\"\n              placeholder=\"Password\"\n              type=\"password\"\n              name=\"password\"\n              value={input.password}\n              onChange={handleChange}\n            />\n            <Button color=\"teal\" fluid size=\"large\" onClick={handleLoginSubmit}>\n              Login\n            </Button>\n          </Segment>\n        </Form>\n        <Message>\n          New to us? <a href=\"#root\">Sign Up</a>\n        </Message>\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n});\n\nexport default withRouter(\n  connect(mapStateToProps, { setCurrentUser })(LoginForm)\n);\n"]},"metadata":{},"sourceType":"module"}