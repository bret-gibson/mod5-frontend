{"ast":null,"code":"export const loginUser = (username, password) => {\n  return (\n    /*FUNCTION*/\n    dispatch => {\n      // console.log(process.env.REACT_APP_API_ENDPOINT);\n      dispatch(authenticatingUser()); // fetch(`${process.env.REACT_APP_API_ENDPOINT}/api/v1/login`)\n\n      fetch(\"http://localhost:3000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          user: {\n            username: username,\n            password: password\n          }\n        })\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      }) // {user: {}, jwt: 'aaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbb.ccccccccccccccccccc'}\n      .then(({\n        user,\n        jwt\n      }) => {\n        localStorage.setItem(\"userData\", user);\n        localStorage.setItem(\"token\", jwt);\n        dispatch(setCurrentUser(user));\n      }).catch(r => r.json().then(e => dispatch(failedLogin(e.message)))); // .then((jsonResponse) => {\n      //   localStorage.setItem('jwt', jsonResponse.jwt)\n      //   dispatch(setCurrentUser(jsonResponse.user))\n      // })\n    }\n  );\n};\nexport const fetchCurrentUser = () => {\n  // takes the token in localStorage and finds out who it belongs to\n  return dispatch => {\n    dispatch(authenticatingUser());\n    fetch(\"http://localhost:3000/profile\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      }\n    }).then(response => response.json()).then(({\n      user\n    }) => dispatch(setCurrentUser(user)));\n  };\n};\nexport const setCurrentUser = userData => ({\n  type: \"SET_CURRENT_USER\",\n  payload: userData\n});\nexport const failedLogin = errorMsg => ({\n  type: \"FAILED_LOGIN\",\n  payload: errorMsg\n}); // tell our app we're currently fetching\n\nexport const authenticatingUser = () => ({\n  type: \"AUTHENTICATING_USER\"\n});","map":{"version":3,"sources":["/Users/bretgibson/Development/code/mod_5/book-club-frontend/src/actions/user.js"],"names":["loginUser","username","password","dispatch","authenticatingUser","fetch","method","headers","Accept","body","JSON","stringify","user","then","response","ok","json","jwt","localStorage","setItem","setCurrentUser","catch","r","e","failedLogin","message","fetchCurrentUser","Authorization","getItem","userData","type","payload","errorMsg"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC/C;AAAO;AAAcC,IAAAA,QAAD,IAAc;AAChC;AACAA,MAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR,CAFgC,CAGhC;;AACAC,MAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,QAAAA,MAAM,EAAE,MAD2B;AAEnCC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD,SAF0B;AAMnCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,IAAI,EAAE;AACJX,YAAAA,QAAQ,EAAEA,QADN;AAEJC,YAAAA,QAAQ,EAAEA;AAFN;AADa,SAAf;AAN6B,OAAhC,CAAL,CAaGW,IAbH,CAaSC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,SAFD,MAEO;AACL,gBAAMF,QAAN;AACD;AACF,OAnBH,EAoBE;AApBF,OAqBGD,IArBH,CAqBQ,CAAC;AAAED,QAAAA,IAAF;AAAQK,QAAAA;AAAR,OAAD,KAAmB;AACvBC,QAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCP,IAAjC;AACAM,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,GAA9B;AACAd,QAAAA,QAAQ,CAACiB,cAAc,CAACR,IAAD,CAAf,CAAR;AACD,OAzBH,EA0BGS,KA1BH,CA0BUC,CAAD,IAAOA,CAAC,CAACN,IAAF,GAASH,IAAT,CAAeU,CAAD,IAAOpB,QAAQ,CAACqB,WAAW,CAACD,CAAC,CAACE,OAAH,CAAZ,CAA7B,CA1BhB,EAJgC,CA+BhC;AACA;AACA;AACA;AACD;AAnCD;AAoCD,CArCM;AAuCP,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AACpC;AACA,SAAQvB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACAC,IAAAA,KAAK,CAAC,+BAAD,EAAkC;AACrCC,MAAAA,MAAM,EAAE,KAD6B;AAErCC,MAAAA,OAAO,EAAE;AACPoB,QAAAA,aAAa,EAAG,UAAST,YAAY,CAACU,OAAb,CAAqB,OAArB,CAA8B;AADhD;AAF4B,KAAlC,CAAL,CAMGf,IANH,CAMSC,QAAD,IAAcA,QAAQ,CAACE,IAAT,EANtB,EAOGH,IAPH,CAOQ,CAAC;AAAED,MAAAA;AAAF,KAAD,KAAcT,QAAQ,CAACiB,cAAc,CAACR,IAAD,CAAf,CAP9B;AAQD,GAVD;AAWD,CAbM;AAeP,OAAO,MAAMQ,cAAc,GAAIS,QAAD,KAAe;AAC3CC,EAAAA,IAAI,EAAE,kBADqC;AAE3CC,EAAAA,OAAO,EAAEF;AAFkC,CAAf,CAAvB;AAKP,OAAO,MAAML,WAAW,GAAIQ,QAAD,KAAe;AACxCF,EAAAA,IAAI,EAAE,cADkC;AAExCC,EAAAA,OAAO,EAAEC;AAF+B,CAAf,CAApB,C,CAKP;;AACA,OAAO,MAAM5B,kBAAkB,GAAG,OAAO;AAAE0B,EAAAA,IAAI,EAAE;AAAR,CAAP,CAA3B","sourcesContent":["export const loginUser = (username, password) => {\n  return /*FUNCTION*/ (dispatch) => {\n    // console.log(process.env.REACT_APP_API_ENDPOINT);\n    dispatch(authenticatingUser());\n    // fetch(`${process.env.REACT_APP_API_ENDPOINT}/api/v1/login`)\n    fetch(\"http://localhost:3000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password,\n        },\n      }),\n    })\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      })\n      // {user: {}, jwt: 'aaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbb.ccccccccccccccccccc'}\n      .then(({ user, jwt }) => {\n        localStorage.setItem(\"userData\", user);\n        localStorage.setItem(\"token\", jwt);\n        dispatch(setCurrentUser(user));\n      })\n      .catch((r) => r.json().then((e) => dispatch(failedLogin(e.message))));\n    // .then((jsonResponse) => {\n    //   localStorage.setItem('jwt', jsonResponse.jwt)\n    //   dispatch(setCurrentUser(jsonResponse.user))\n    // })\n  };\n};\n\nexport const fetchCurrentUser = () => {\n  // takes the token in localStorage and finds out who it belongs to\n  return (dispatch) => {\n    dispatch(authenticatingUser());\n    fetch(\"http://localhost:3000/profile\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    })\n      .then((response) => response.json())\n      .then(({ user }) => dispatch(setCurrentUser(user)));\n  };\n};\n\nexport const setCurrentUser = (userData) => ({\n  type: \"SET_CURRENT_USER\",\n  payload: userData,\n});\n\nexport const failedLogin = (errorMsg) => ({\n  type: \"FAILED_LOGIN\",\n  payload: errorMsg,\n});\n\n// tell our app we're currently fetching\nexport const authenticatingUser = () => ({ type: \"AUTHENTICATING_USER\" });\n"]},"metadata":{},"sourceType":"module"}