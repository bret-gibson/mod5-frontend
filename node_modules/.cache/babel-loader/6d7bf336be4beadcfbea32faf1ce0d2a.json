{"ast":null,"code":"var _jsxFileName = \"/Users/bretgibson/Development/code/mod_5/book-club-frontend/src/components/PostForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Button, TextArea } from \"semantic-ui-react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setBookPosts } from \"../actions/post\";\nimport { Editor } from \"@tinymce/tinymce-react\";\n\nfunction PostForm(props) {\n  const [content, setContent] = useState(\"\"); //   const [updateToggle, setUpdateToggle] = useState({\n  //     comment: \"\",\n  //   });\n\n  const handleChange = (content, editor) => {\n    setContent(e.target.value);\n  };\n\n  useEffect(() => {\n    if (props.previousContent) {\n      setContent(props.previousContent);\n    }\n  }, []);\n\n  const handleSubmit = () => {\n    fetch(\"http://localhost:3000/posts\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user_id: props.user.id,\n        group_book_id: props.groupBook.id,\n        content: content,\n        parent_id: null\n      })\n    }).then(() => {\n      fetch(`http://localhost:3000/group_books/${props.groupBook.id}`).then(resp => resp.json()).then(groupBookData => {\n        props.setBookPosts(groupBookData.posts);\n        setContent(\"\");\n        props.setPostToggle(false);\n      });\n    });\n  };\n\n  const handleEdit = e => {\n    fetch(`http://localhost:3000/posts/${props.postId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        content: content\n      })\n    }).then(() => {\n      fetch(`http://localhost:3000/group_books/${props.groupBook.id}`).then(resp => resp.json()).then(groupBookData => {\n        props.setBookPosts(groupBookData.posts);\n        props.setEditToggle(false);\n      });\n    });\n  }; //   componentDidMount() {\n  //     if (this.props.updateToggle === true) {\n  //       this.setState({ comment: this.props.comment.comment_text });\n  //     }\n  //   }\n  //   handleChange = (event) => {\n  //     const value = event.target.value;\n  //     const name = event.target.name;\n  //     this.setState({\n  //       [name]: value,\n  //     });\n  //   };\n  //   handleSubmit = (event) => {\n  //     event.preventDefault();\n  //     this.props.doSubmit(this.state.comment);\n  //     this.setState({\n  //       comment: \"\",\n  //     });\n  //   };\n  //   handleUpdate = (event) => {\n  //     event.preventDefault();\n  //     const newCommentObj = {\n  //       user_id: this.props.userData.id,\n  //       question_id: this.props.question.id,\n  //       comment_text: this.state.comment,\n  //     };\n  //     fetch(`http://localhost:3000/comments/${this.props.comment.id}`, {\n  //       method: \"PATCH\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //       body: JSON.stringify(newCommentObj),\n  //     });\n  //     this.setState({\n  //       comment: \"\",\n  //     });\n  //   };\n  //   style = {\n  //     width: \"30%\",\n  //   };\n  //   render() {\n  // if (this.props.updateToggle === true) {\n  //   return (\n  //     <div>\n  //       <Form>\n  //         <Form.Field style={this.style}>\n  //           <TextArea\n  //             name=\"comment\"\n  //             type=\"textarea\"\n  //             onChange={this.handleChange}\n  //             value={this.state.comment}\n  //           />\n  //           {/* <input name='comment' type='textarea' onChange={this.handleChange} value={this.state.comment} /> */}\n  //         </Form.Field>\n  //         <Button\n  //           color=\"violet\"\n  //           size=\"mini\"\n  //           type=\"submit\"\n  //           value=\"Update Comment\"\n  //           onClick={this.handleSubmit}\n  //         >\n  //           Submit\n  //         </Button>\n  //       </Form>\n  //       <br />\n  //     </div>\n  //   );\n  // } else {\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, props.previousContent && props.postId ? /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    name: \"content\",\n    type: \"textarea\",\n    onChange: handleChange,\n    value: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    color: \"violet\",\n    size: \"mini\",\n    type: \"submit\",\n    value: \"Save Edit\",\n    onClick: handleEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, \"Save Edit\")) : /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Editor, {\n    apiKey: \"flqstmmeoxdr0xeliwtq0xx10lz2a9vuha5bttpd1xhkzwld\",\n    name: \"content\",\n    value: content,\n    init: {\n      height: 500,\n      menubar: false,\n      plugins: [\"advlist autolink lists link image charmap print preview anchor\", \"searchreplace visualblocks code fullscreen\", \"insertdatetime media table paste code help wordcount\"],\n      toolbar: \"undo redo | formatselect | bold italic backcolor | \\\n             alignleft aligncenter alignright alignjustify | \\\n             bullist numlist outdent indent | removeformat | help\"\n    },\n    onEditorChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"violet\",\n    size: \"mini\",\n    type: \"submit\",\n    value: \"Submit Post\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }, \"Submit Post\")));\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    group: state.groups.group,\n    groupBook: state.groups.groupBook,\n    groupUsers: state.groups.groupUsers\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setBookPosts: posts => dispatch(setBookPosts(posts))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PostForm));","map":{"version":3,"sources":["/Users/bretgibson/Development/code/mod_5/book-club-frontend/src/components/PostForm.js"],"names":["React","useState","useEffect","Form","Button","TextArea","withRouter","connect","setBookPosts","Editor","PostForm","props","content","setContent","handleChange","editor","e","target","value","previousContent","handleSubmit","fetch","method","headers","body","JSON","stringify","user_id","user","id","group_book_id","groupBook","parent_id","then","resp","json","groupBookData","posts","setPostToggle","handleEdit","postId","setEditToggle","height","menubar","plugins","toolbar","mapStateToProps","state","group","groups","groupUsers","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Form, Button, TextArea } from \"semantic-ui-react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setBookPosts } from \"../actions/post\";\nimport { Editor } from \"@tinymce/tinymce-react\";\n\nfunction PostForm(props) {\n  const [content, setContent] = useState(\"\");\n\n  //   const [updateToggle, setUpdateToggle] = useState({\n  //     comment: \"\",\n  //   });\n\n  const handleChange = (content, editor) => {\n    setContent(e.target.value);\n  };\n\n  useEffect(() => {\n    if (props.previousContent) {\n      setContent(props.previousContent);\n    }\n  }, []);\n\n  const handleSubmit = () => {\n    fetch(\"http://localhost:3000/posts\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user_id: props.user.id,\n        group_book_id: props.groupBook.id,\n        content: content,\n        parent_id: null,\n      }),\n    }).then(() => {\n      fetch(`http://localhost:3000/group_books/${props.groupBook.id}`)\n        .then((resp) => resp.json())\n        .then((groupBookData) => {\n          props.setBookPosts(groupBookData.posts);\n          setContent(\"\");\n          props.setPostToggle(false);\n        });\n    });\n  };\n\n  const handleEdit = (e) => {\n    fetch(`http://localhost:3000/posts/${props.postId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        content: content,\n      }),\n    }).then(() => {\n      fetch(`http://localhost:3000/group_books/${props.groupBook.id}`)\n        .then((resp) => resp.json())\n        .then((groupBookData) => {\n          props.setBookPosts(groupBookData.posts);\n          props.setEditToggle(false);\n        });\n    });\n  };\n\n  //   componentDidMount() {\n  //     if (this.props.updateToggle === true) {\n  //       this.setState({ comment: this.props.comment.comment_text });\n  //     }\n  //   }\n\n  //   handleChange = (event) => {\n  //     const value = event.target.value;\n  //     const name = event.target.name;\n  //     this.setState({\n  //       [name]: value,\n  //     });\n  //   };\n\n  //   handleSubmit = (event) => {\n  //     event.preventDefault();\n  //     this.props.doSubmit(this.state.comment);\n  //     this.setState({\n  //       comment: \"\",\n  //     });\n  //   };\n\n  //   handleUpdate = (event) => {\n  //     event.preventDefault();\n  //     const newCommentObj = {\n  //       user_id: this.props.userData.id,\n  //       question_id: this.props.question.id,\n  //       comment_text: this.state.comment,\n  //     };\n  //     fetch(`http://localhost:3000/comments/${this.props.comment.id}`, {\n  //       method: \"PATCH\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //       body: JSON.stringify(newCommentObj),\n  //     });\n  //     this.setState({\n  //       comment: \"\",\n  //     });\n  //   };\n\n  //   style = {\n  //     width: \"30%\",\n  //   };\n\n  //   render() {\n  // if (this.props.updateToggle === true) {\n  //   return (\n  //     <div>\n  //       <Form>\n  //         <Form.Field style={this.style}>\n  //           <TextArea\n  //             name=\"comment\"\n  //             type=\"textarea\"\n  //             onChange={this.handleChange}\n  //             value={this.state.comment}\n  //           />\n  //           {/* <input name='comment' type='textarea' onChange={this.handleChange} value={this.state.comment} /> */}\n  //         </Form.Field>\n  //         <Button\n  //           color=\"violet\"\n  //           size=\"mini\"\n  //           type=\"submit\"\n  //           value=\"Update Comment\"\n  //           onClick={this.handleSubmit}\n  //         >\n  //           Submit\n  //         </Button>\n  //       </Form>\n  //       <br />\n  //     </div>\n  //   );\n  // } else {\n  return (\n    <div>\n      {props.previousContent && props.postId ? (\n        <Form>\n          <Form.Field>\n            <TextArea\n              name=\"content\"\n              type=\"textarea\"\n              onChange={handleChange}\n              value={content}\n            />\n            {/* <input placeholder='Comment' name='comment' type='textarea' onChange={this.handleChange} value={this.state.comment} /> */}\n          </Form.Field>\n          <Button\n            color=\"violet\"\n            size=\"mini\"\n            type=\"submit\"\n            value=\"Save Edit\"\n            onClick={handleEdit}\n          >\n            Save Edit\n          </Button>\n        </Form>\n      ) : (\n        <Form>\n          <Editor\n            apiKey=\"flqstmmeoxdr0xeliwtq0xx10lz2a9vuha5bttpd1xhkzwld\"\n            name=\"content\"\n            value={content}\n            init={{\n              height: 500,\n              menubar: false,\n              plugins: [\n                \"advlist autolink lists link image charmap print preview anchor\",\n                \"searchreplace visualblocks code fullscreen\",\n                \"insertdatetime media table paste code help wordcount\",\n              ],\n              toolbar:\n                \"undo redo | formatselect | bold italic backcolor | \\\n             alignleft aligncenter alignright alignjustify | \\\n             bullist numlist outdent indent | removeformat | help\",\n            }}\n            onEditorChange={handleChange}\n          />\n          {/* <Form.Field>\n            <TextArea\n              name=\"content\"\n              type=\"textarea\"\n              onChange={handleChange}\n              value={content}\n            />\n          </Form.Field> */}\n\n          <Button\n            color=\"violet\"\n            size=\"mini\"\n            type=\"submit\"\n            value=\"Submit Post\"\n            onClick={handleSubmit}\n          >\n            Submit Post\n          </Button>\n        </Form>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    group: state.groups.group,\n    groupBook: state.groups.groupBook,\n    groupUsers: state.groups.groupUsers,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setBookPosts: (posts) => dispatch(setBookPosts(posts)),\n  };\n};\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(PostForm)\n);\n"]},"metadata":{},"sourceType":"module"}