{"ast":null,"code":"var _jsxFileName = \"/Users/bretgibson/Development/code/mod_5/book-club-frontend/src/components/CreateUserForm.js\";\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router\";\nimport { Grid, Header, Button, Form, Segment, Message, Image } from \"semantic-ui-react\";\nimport { setCurrentUser, loginUser, authenticatingUser, failedLogin } from \"../actions/user\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nfunction CreateUserForm(props) {\n  const [input, setInput] = useState({\n    username: \"\",\n    password: \"\",\n    avatar: \"\"\n  });\n\n  const handleChange = e => {\n    setInput({ ...input,\n      [e.target.name]: [e.target.value]\n    });\n  }; //When form is submitted, make a fetch to \"log in the user\"\n\n\n  const handleLoginSubmit = e => {\n    e.preventDefault();\n    fetch(\"http://localhost:3000/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: input.username[0],\n        password: input.password[0],\n        avatar: input.avatar[0]\n      })\n    }).then(() => {\n      fetch(\"http://localhost:3000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: input.username[0],\n          password: input.password[0]\n        })\n      }).then(res => res.json()).then(userData => {\n        console.log(\"response from the server\", userData);\n\n        if (userData.error_message) {\n          alert(userData.error_message);\n        } else {\n          localStorage.setItem(\"token\", userData.token);\n          localStorage.setItem(\"userId\", userData.user_data.id); //added this to store current user\n\n          props.setCurrentUser(userData.user_data);\n        }\n      });\n    }).then(() => {\n      return props.history.push(\"/\");\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    textAlign: \"center\",\n    verticalAlign: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    style: {\n      maxWidth: 450\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    as: \"h2\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Image, {\n    style: {\n      display: \"inline-block\"\n    },\n    size: \"huge\",\n    src: \"/logo.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }), \"Create Your Account\"), /*#__PURE__*/React.createElement(Form, {\n    size: \"large\",\n    onSubmit: handleLoginSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Segment, {\n    stacked: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Input, {\n    fluid: true,\n    icon: \"user\",\n    iconPosition: \"left\",\n    placeholder: \"Username\",\n    name: \"username\",\n    value: input.username,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    fluid: true,\n    icon: \"lock\",\n    iconPosition: \"left\",\n    placeholder: \"Password\",\n    type: \"password\",\n    name: \"password\",\n    value: input.password,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    fluid: true,\n    icon: \"lock\",\n    iconPosition: \"left\",\n    placeholder: \"Avatar URL\",\n    type: \"avatar\",\n    name: \"avatar\",\n    value: input.avatar,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"teal\",\n    fluid: true,\n    size: \"large\",\n    onClick: handleLoginSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, \"Create Account and Login\")))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    // user: state.user.user,\n    user: state.user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setCurrentUser: userData => dispatch(setCurrentUser(userData)),\n    authenticatingUser: () => dispatch(authenticatingUser()),\n    failedLogin: () => dispatch(failedLogin())\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateUserForm));","map":{"version":3,"sources":["/Users/bretgibson/Development/code/mod_5/book-club-frontend/src/components/CreateUserForm.js"],"names":["React","useState","withRouter","Grid","Header","Button","Form","Segment","Message","Image","setCurrentUser","loginUser","authenticatingUser","failedLogin","compose","connect","Link","Redirect","CreateUserForm","props","input","setInput","username","password","avatar","handleChange","e","target","name","value","handleLoginSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","userData","console","log","error_message","alert","localStorage","setItem","token","user_data","id","history","push","maxWidth","display","mapStateToProps","state","user","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { withRouter } from \"react-router\";\nimport {\n  Grid,\n  Header,\n  Button,\n  Form,\n  Segment,\n  Message,\n  Image\n} from \"semantic-ui-react\";\nimport {\n  setCurrentUser,\n  loginUser,\n  authenticatingUser,\n  failedLogin,\n} from \"../actions/user\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport { Link, Redirect } from \"react-router-dom\";\n\nfunction CreateUserForm(props) {\n  const [input, setInput] = useState({\n    username: \"\",\n    password: \"\",\n    avatar: \"\",\n  });\n\n  const handleChange = (e) => {\n    setInput({\n      ...input,\n      [e.target.name]: [e.target.value],\n    });\n  };\n\n  //When form is submitted, make a fetch to \"log in the user\"\n  const handleLoginSubmit = (e) => {\n    e.preventDefault();\n    fetch(\"http://localhost:3000/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: input.username[0],\n        password: input.password[0],\n        avatar: input.avatar[0],\n      }),\n    })\n      .then(() => {\n        fetch(\"http://localhost:3000/login\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            username: input.username[0],\n            password: input.password[0],\n          }),\n        })\n          .then((res) => res.json())\n          .then((userData) => {\n            console.log(\"response from the server\", userData);\n            if (userData.error_message) {\n              alert(userData.error_message);\n            } else {\n              localStorage.setItem(\"token\", userData.token);\n              localStorage.setItem(\"userId\", userData.user_data.id); //added this to store current user\n              props.setCurrentUser(userData.user_data);\n            }\n          });\n      })\n      .then(() => {\n        return props.history.push(\"/\");\n      });\n  };\n\n  return (\n    <Grid textAlign=\"center\" verticalAlign=\"middle\">\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as=\"h2\" textAlign=\"center\">\n          <Image\n            style={{ display: \"inline-block\" }}\n            size=\"huge\"\n            src=\"/logo.png\"\n          ></Image>\n          Create Your Account\n        </Header>\n        <Form size=\"large\" onSubmit={handleLoginSubmit}>\n          <Segment stacked>\n            <Form.Input\n              fluid\n              icon=\"user\"\n              iconPosition=\"left\"\n              placeholder=\"Username\"\n              name=\"username\"\n              value={input.username}\n              onChange={handleChange}\n            />\n            <Form.Input\n              fluid\n              icon=\"lock\"\n              iconPosition=\"left\"\n              placeholder=\"Password\"\n              type=\"password\"\n              name=\"password\"\n              value={input.password}\n              onChange={handleChange}\n            />\n            <Form.Input\n              fluid\n              icon=\"lock\"\n              iconPosition=\"left\"\n              placeholder=\"Avatar URL\"\n              type=\"avatar\"\n              name=\"avatar\"\n              value={input.avatar}\n              onChange={handleChange}\n            />\n            <Button color=\"teal\" fluid size=\"large\" onClick={handleLoginSubmit}>\n              Create Account and Login\n            </Button>\n          </Segment>\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    // user: state.user.user,\n    user: state.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setCurrentUser: (userData) => dispatch(setCurrentUser(userData)),\n    authenticatingUser: () => dispatch(authenticatingUser()),\n    failedLogin: () => dispatch(failedLogin()),\n  };\n};\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(CreateUserForm)\n);\n"]},"metadata":{},"sourceType":"module"}