{"ast":null,"code":"// export const loginUser = (username, password) => {\n//   return /*FUNCTION*/ (dispatch) => {\n//     // console.log(process.env.REACT_APP_API_ENDPOINT);\n//     dispatch(authenticatingUser());\n//     // fetch(`${process.env.REACT_APP_API_ENDPOINT}/api/v1/login`)\n//     fetch(\"http://localhost:3000/login\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         Accept: \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         user: {\n//           username: username,\n//           password: password,\n//         },\n//       }),\n//     })\n//       .then((response) => {\n//         if (response.ok) {\n//           return response.json();\n//         } else {\n//           throw response;\n//         }\n//       })\n//       // {user: {}, jwt: 'aaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbb.ccccccccccccccccccc'}\n//       .then(({ user, jwt }) => {\n//         localStorage.setItem(\"userData\", user);\n//         localStorage.setItem(\"token\", jwt);\n//         dispatch(setCurrentUser(user));\n//       })\n//       .catch((r) => r.json().then((e) => dispatch(failedLogin(e.message))));\n//     // .then((jsonResponse) => {\n//     //   localStorage.setItem('jwt', jsonResponse.jwt)\n//     //   dispatch(setCurrentUser(jsonResponse.user))\n//     // })\n//   };\n// };\nexport const fetchCurrentUser = () => {\n  // takes the token in localStorage and finds out who it belongs to\n  return dispatch => {\n    dispatch(authenticatingUser());\n    fetch(\"http://localhost:3000/profile\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      }\n    }).then(response => response.json()).then(({\n      user\n    }) => dispatch(setCurrentUser(user)));\n  };\n};\nexport const setCurrentUser = userData => ({\n  type: \"SET_CURRENT_USER\",\n  payload: userData\n});\nexport const failedLogin = errorMsg => ({\n  type: \"FAILED_LOGIN\",\n  payload: errorMsg\n});\nexport const setUserGroups = userGroups => ({\n  type: \"SET_USER_GROUPS\",\n  payload: userGroups\n});\nexport const setSelectedUser = selectedUser => ({\n  type: \"SET_SELECTED_USER\",\n  payload: selectedUser\n});\nexport const setUserPosts = user => ({\n  type: \"SET_USER_POSTS\",\n  payload: selectedUser\n}); // tell our app we're currently fetching\n\nexport const authenticatingUser = () => ({\n  type: \"AUTHENTICATING_USER\"\n});","map":{"version":3,"sources":["/Users/bretgibson/Development/code/mod_5/book-club-frontend/src/actions/user.js"],"names":["fetchCurrentUser","dispatch","authenticatingUser","fetch","method","headers","Authorization","localStorage","getItem","then","response","json","user","setCurrentUser","userData","type","payload","failedLogin","errorMsg","setUserGroups","userGroups","setSelectedUser","selectedUser","setUserPosts"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,gBAAgB,GAAG,MAAM;AACpC;AACA,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACAC,IAAAA,KAAK,CAAC,+BAAD,EAAkC;AACrCC,MAAAA,MAAM,EAAE,KAD6B;AAErCC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;AADhD;AAF4B,KAAlC,CAAL,CAMGC,IANH,CAMSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EANtB,EAOGF,IAPH,CAOQ,CAAC;AAAEG,MAAAA;AAAF,KAAD,KAAcX,QAAQ,CAACY,cAAc,CAACD,IAAD,CAAf,CAP9B;AAQD,GAVD;AAWD,CAbM;AAeP,OAAO,MAAMC,cAAc,GAAIC,QAAD,KAAe;AAC3CC,EAAAA,IAAI,EAAE,kBADqC;AAE3CC,EAAAA,OAAO,EAAEF;AAFkC,CAAf,CAAvB;AAKP,OAAO,MAAMG,WAAW,GAAIC,QAAD,KAAe;AACxCH,EAAAA,IAAI,EAAE,cADkC;AAExCC,EAAAA,OAAO,EAAEE;AAF+B,CAAf,CAApB;AAKP,OAAO,MAAMC,aAAa,GAAIC,UAAD,KAAiB;AAC5CL,EAAAA,IAAI,EAAE,iBADsC;AAE5CC,EAAAA,OAAO,EAAEI;AAFmC,CAAjB,CAAtB;AAKP,OAAO,MAAMC,eAAe,GAAIC,YAAD,KAAmB;AAChDP,EAAAA,IAAI,EAAE,mBAD0C;AAEhDC,EAAAA,OAAO,EAAEM;AAFuC,CAAnB,CAAxB;AAKP,OAAO,MAAMC,YAAY,GAAIX,IAAD,KAAW;AACrCG,EAAAA,IAAI,EAAE,gBAD+B;AAErCC,EAAAA,OAAO,EAAEM;AAF4B,CAAX,CAArB,C,CAKP;;AACA,OAAO,MAAMpB,kBAAkB,GAAG,OAAO;AAAEa,EAAAA,IAAI,EAAE;AAAR,CAAP,CAA3B","sourcesContent":["// export const loginUser = (username, password) => {\n//   return /*FUNCTION*/ (dispatch) => {\n//     // console.log(process.env.REACT_APP_API_ENDPOINT);\n//     dispatch(authenticatingUser());\n//     // fetch(`${process.env.REACT_APP_API_ENDPOINT}/api/v1/login`)\n//     fetch(\"http://localhost:3000/login\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         Accept: \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         user: {\n//           username: username,\n//           password: password,\n//         },\n//       }),\n//     })\n//       .then((response) => {\n//         if (response.ok) {\n//           return response.json();\n//         } else {\n//           throw response;\n//         }\n//       })\n//       // {user: {}, jwt: 'aaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbb.ccccccccccccccccccc'}\n//       .then(({ user, jwt }) => {\n//         localStorage.setItem(\"userData\", user);\n//         localStorage.setItem(\"token\", jwt);\n//         dispatch(setCurrentUser(user));\n//       })\n//       .catch((r) => r.json().then((e) => dispatch(failedLogin(e.message))));\n//     // .then((jsonResponse) => {\n//     //   localStorage.setItem('jwt', jsonResponse.jwt)\n//     //   dispatch(setCurrentUser(jsonResponse.user))\n//     // })\n//   };\n// };\n\nexport const fetchCurrentUser = () => {\n  // takes the token in localStorage and finds out who it belongs to\n  return (dispatch) => {\n    dispatch(authenticatingUser());\n    fetch(\"http://localhost:3000/profile\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    })\n      .then((response) => response.json())\n      .then(({ user }) => dispatch(setCurrentUser(user)));\n  };\n};\n\nexport const setCurrentUser = (userData) => ({\n  type: \"SET_CURRENT_USER\",\n  payload: userData,\n});\n\nexport const failedLogin = (errorMsg) => ({\n  type: \"FAILED_LOGIN\",\n  payload: errorMsg,\n});\n\nexport const setUserGroups = (userGroups) => ({\n  type: \"SET_USER_GROUPS\",\n  payload: userGroups,\n});\n\nexport const setSelectedUser = (selectedUser) => ({\n  type: \"SET_SELECTED_USER\",\n  payload: selectedUser,\n});\n\nexport const setUserPosts = (user) => ({\n  type: \"SET_USER_POSTS\",\n  payload: selectedUser,\n});\n\n// tell our app we're currently fetching\nexport const authenticatingUser = () => ({ type: \"AUTHENTICATING_USER\" });\n"]},"metadata":{},"sourceType":"module"}